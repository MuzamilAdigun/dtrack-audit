package dtrack

import (
	"fmt"
	"net/url"
	"strings"
)

func getVulnViewUrl(v Vulnerability, config *Config) string {
	uv := url.Values{}
	uv.Set("source", v.Source)
	uv.Set("vulnId", v.VulnId)
	return config.ApiUrl + "/vulnerability?" + uv.Encode()
}

//func GetVulnAnalisis(c Component, v Vulnerability, config *Config) string {
//Analyse, err := ApiClient.VulnAnalysis(config.ProjectId, c.Uuid, v.Uuid)
//	checkError(err)
//FP :=
//FP = AnalysisStateFalsePositive
//	ProjectId = config.ProjectId
//	VulnId = Vulnerability.VulnId
//CompUid= Finding.Comp.Uuid  f.An.State,
//return string(Analyse)

//}

func formatFinding(findings []Finding, Analys Analysis, config *Config) string {
	var finalString []string
	for _, f := range findings {

		//fmt.Println(Analyse)
		fmt.Printf("An de vul: %v\n", AnalysisState(Analys.AnalysisState))

		if AnalysisState(Analys.AnalysisState) != "" {
			finalString = append(finalString, fmt.Sprintf(
				" > %s: %s %s\n   Component: %s %s\n   More info: %s\n   Vulnerability is marked as: %s\n\n",
				f.Vuln.Severity, f.Vuln.Uuid, f.Vuln.Title, f.Comp.Name, f.Comp.Uuid, getVulnViewUrl(f.Vuln, config), Analys.AnalysisState))
		}
		if AnalysisState(Analys.AnalysisState) == "" {
			finalString = append(finalString, fmt.Sprintf(
				" > %s: %s\n   Component: %s %s\n   More info: %s\n\n",
				f.Vuln.Severity, f.Vuln.Title, f.Comp.Name, f.Comp.Uuid, getVulnViewUrl(f.Vuln, config)))

		}

	}
	return strings.Join(finalString[:], "")
}

func PrintForUser(findings []Finding, Analys Analysis, config *Config) {
	if len(findings) > 0 {
		if Analys.AnalysisState == string(AnalysisStateFalsePositive) {
			fmt.Printf("%d vulnerabilities found!\n\n", len(findings))
			fmt.Print(formatFinding(findings, Analys, config))
			//fmt.Printf("Il y a une vuln en tout cas mdr")
		}

	}
}
